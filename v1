//SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.5.0 <0.9.0;

contract Lottery {
    address payable[] public players;
    address payable[] public owner; //SPECIFIY CONTRACT OWNER WITH ETH ADDRESS - THIS IS ADDRESS THAT WILL DEPLOY CONTRACT
    
    constructor{
        owner = msg.sender //Right here we specify our deployer address instead of msg.sender

    }

    receive() external payable{
        require(msg.sender != owner); //Owner cannot enter raffle
        require(msg.sender != 0.21 ETH ); //msg.sender cannot send more than .2 // 10 entries per address 
        require(msg.sender == 0.02 ETH); //Amount sent MUST = .02 ETH
        players.push(payable(msg.sender)); //Adds msg.sender(address of the sender) to players array

    }
/*
    function getTicketEntry() public view returns(uint){
        require(players.length != 11); 
        returns players.length;

    }

players.length cannot be more than 11  ?? this doesn't stop over entry of tickets but stops more than 10 people from entering FIX FIX FIX


*/

    

    function getWinner() public{
        require(msg.sender == owner); //only onwner can call function
        require(players.length >= 10); //requires there to be at least 10 entries

    }


    function getBal() public view returns(uint){
        require(msg.sender == owner); //only owner can call function
        return address(this).balance; // View contract bal
    }
     

}
